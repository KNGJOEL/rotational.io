<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rotational Labs</title><link>https://rotational.io/</link><description>Recent content on Rotational Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright &amp;copy; 2021 Rotational Labs, LLC, All Rights Reserved</copyright><lastBuildDate>Tue, 06 Apr 2021 13:49:57 -0400</lastBuildDate><atom:link href="https://rotational.io/index.xml" rel="self" type="application/rss+xml"/><item><title>A Distributed Systems Maze</title><link>https://rotational.io/blog/a-distributed-systems-maze/</link><pubDate>Tue, 06 Apr 2021 13:49:57 -0400</pubDate><guid>https://rotational.io/blog/a-distributed-systems-maze/</guid><description>The most exciting applications coming out these days are the ones that aim big — aspiring to reach a global audience of users across regions, languages, timezones, and data centers.</description></item><item><title>Project Planning With Block Based Dependencies</title><link>https://rotational.io/blog/project-planning-with-block-based-dependencies/</link><pubDate>Wed, 24 Mar 2021 07:49:48 -0400</pubDate><guid>https://rotational.io/blog/project-planning-with-block-based-dependencies/</guid><description>Good software development achieves complexity by describing the interactions of simple components. Of course, this is harder than it sounds, and if Mark Twain had been a software developer he would have likely said: &amp;ldquo;if I had more time, I would have created a simpler design.</description></item><item><title>A Parrot Trainer Eats Crow</title><link>https://rotational.io/blog/a-parrot-trainer-eats-crow/</link><pubDate>Fri, 19 Mar 2021 08:42:21 -0400</pubDate><guid>https://rotational.io/blog/a-parrot-trainer-eats-crow/</guid><description>In this post, we&amp;rsquo;ll consider how it is that models trained on massive datasets using millions of parameters can be both &amp;ldquo;low bias&amp;rdquo; and also very biased, and begin to think through what we in the ML community might be able to do about it.</description></item><item><title>Documenting a gRPC API with OpenAPI</title><link>https://rotational.io/blog/documenting-grpc-with-openapi/</link><pubDate>Thu, 21 Jan 2021 17:45:35 +0000</pubDate><guid>https://rotational.io/blog/documenting-grpc-with-openapi/</guid><description>gRPC makes the specification and implementation of networked APIs a snap. But what is the simplest way to document a gRPC API?</description></item><item><title>Why UX Will Get Worse Before it Gets Better</title><link>https://rotational.io/blog/ux-whats-missing/</link><pubDate>Sun, 19 Jul 2020 15:46:00 +0000</pubDate><guid>https://rotational.io/blog/ux-whats-missing/</guid><description>The things we make are not user-friendly by accident; we have to make them that way.</description></item><item><title>Basic Python Profiling</title><link>https://rotational.io/blog/basic-python-profiling/</link><pubDate>Tue, 14 Jul 2020 18:01:08 +0000</pubDate><guid>https://rotational.io/blog/basic-python-profiling/</guid><description>I&amp;rsquo;m getting started on some projects that will make use of extensive Python performance profiling, unfortunately Python doesn&amp;rsquo;t focus on performance and so doesn&amp;rsquo;t have benchmark tools like I might find in Go.</description></item><item><title>The Georeplication Bakeoff</title><link>https://rotational.io/blog/georeplication-bakeoff/</link><pubDate>Sat, 02 Mar 2019 14:59:00 +0000</pubDate><guid>https://rotational.io/blog/georeplication-bakeoff/</guid><description>In this post, I&amp;rsquo;ll present a comparison of the experimental results of several published implementations of consensus methods for wide-area/geo replication.</description></item><item><title>Pop Distributed Systems</title><link>https://rotational.io/blog/pop-distributed-systems/</link><pubDate>Fri, 08 Feb 2019 10:07:00 +0000</pubDate><guid>https://rotational.io/blog/pop-distributed-systems/</guid><description>This past Fall, I took a course in distributed systems at the University of Maryland College Park.</description></item><item><title>Laissez-Faire in Distributed Systems</title><link>https://rotational.io/blog/laissez-faire-distributed-systems/</link><pubDate>Sun, 02 Dec 2018 16:42:00 +0000</pubDate><guid>https://rotational.io/blog/laissez-faire-distributed-systems/</guid><description>What do we want? Distribution with strong consistency! When do we want it? Faster than the speed of consistency protocols!</description></item><item><title>Go Testing Notes</title><link>https://rotational.io/blog/go-testing-notes/</link><pubDate>Sat, 22 Sep 2018 09:58:12 +0000</pubDate><guid>https://rotational.io/blog/go-testing-notes/</guid><description>In this post I&amp;rsquo;m just going to maintain a list of notes for Go testing that I seem to commonly need to reference.</description></item><item><title>Streaming Remote Throughput</title><link>https://rotational.io/blog/streaming-remote-throughput/</link><pubDate>Tue, 11 Sep 2018 15:19:17 +0000</pubDate><guid>https://rotational.io/blog/streaming-remote-throughput/</guid><description>In order to improve the performance of asynchronous message passing in Alia, I&amp;rsquo;m using gRPC bidirectional streaming to create the peer to peer connections.</description></item><item><title>The Actor Model</title><link>https://rotational.io/blog/actor-model/</link><pubDate>Fri, 03 Aug 2018 07:27:36 +0000</pubDate><guid>https://rotational.io/blog/actor-model/</guid><description>Building correct concurrent programs in a distributed system with multiple threads and processes can quickly become very complex to reason about.</description></item><item><title>Messaging Throughput gRPC vs. ZMQ</title><link>https://rotational.io/blog/message-throughput-grpc-vs-zmq/</link><pubDate>Mon, 04 Sep 2017 17:20:06 +0000</pubDate><guid>https://rotational.io/blog/message-throughput-grpc-vs-zmq/</guid><description>Building distributed systems in Go requires an RPC or message framework of some sort. In the systems I build I prefer to pass messages serialized with protocol buffers therefore a natural choice for me is grpc.</description></item><item><title>Synchronizing Structs for Safe Concurrency in Go</title><link>https://rotational.io/blog/synchronizing-structs/</link><pubDate>Tue, 21 Feb 2017 10:48:24 +0000</pubDate><guid>https://rotational.io/blog/synchronizing-structs/</guid><description>Go is built for concurrency by providing language features that allow developers to embed complex concurrency patterns into their applications.</description></item><item><title>Visualizing Distributed Systems</title><link>https://rotational.io/blog/visualizing-distributed-systems/</link><pubDate>Tue, 26 Apr 2016 11:34:42 +0000</pubDate><guid>https://rotational.io/blog/visualizing-distributed-systems/</guid><description>As I&amp;rsquo;ve dug into my distributed systems research, one question keeps coming up: “How do you visualize distributed systems?</description></item><item><title>Benjamin Bengfort</title><link>https://rotational.io/author/benjamin-bengfort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rotational.io/author/benjamin-bengfort/</guid><description>Founder and CEO, Rotational Labs, LLC.
Creator of Yellowbrick, machine learning practitioner, distributed systems developer, data science educator, O’Reilly author, Guyanese-American, BBQ enthusiast</description></item><item><title>Rebecca Bilbro</title><link>https://rotational.io/author/rebecca-bilbro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rotational.io/author/rebecca-bilbro/</guid><description>Founder and CTO, Rotational Labs, LLC.
Creator of Yellowbrick, applied NLP developer, Python &amp;amp; Go programmer, data science educator, O’Reilly author, bad ukulelist.</description></item><item><title>Star Streaks</title><link>https://rotational.io/starstreak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://rotational.io/starstreak/</guid><description/></item></channel></rss>